import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.498a5564.js";const m=JSON.parse('{"title":"事件循环机制","description":"","frontmatter":{"title":"事件循环机制"},"headers":[],"relativePath":"pages/front/js/eventLoop.md","filePath":"pages/front/js/eventLoop.md"}'),p={name:"pages/front/js/eventLoop.md"},o=l(`<p>事件循环机制</p><p>js是一门单线程的编程语言，也就是说js在处理任务的时候，所有任务只能在一个线程上排队被执行，那如果某一个任务耗时比较长呢？总不能等到它执行结束再去执行下一个。 所以在线程之内，又被分为了两个队列：</p><ul><li>同步任务队列</li><li>异步任务队列 <ul><li>宏任务</li><li>微任务</li></ul></li></ul><table><thead><tr><th>微任务</th><th>宏任务</th></tr></thead><tbody><tr><td>Promise.then</td><td>script(整体代码)</td></tr><tr><td>async/await</td><td>setTimeout</td></tr><tr><td>process.nextTick</td><td>setInterval</td></tr><tr><td>MutationObserver</td><td>setImmediate</td></tr><tr><td>-</td><td>I/O</td></tr><tr><td>-</td><td>UI render</td></tr></tbody></table><p>结论：执行宏任务，然后执行该宏任务产生的微任务，若微任务在执行过程中产生了新的微任务，则继续执行微任务，微任务执行完毕后，再回到宏任务中进行下一轮循环。</p><h2 id="js事件循环执行顺序" tabindex="-1">js事件循环执行顺序 <a class="header-anchor" href="#js事件循环执行顺序" aria-label="Permalink to &quot;js事件循环执行顺序&quot;">​</a></h2><ol><li>执行同步代码</li><li>执行所有微任务队列</li><li>清除微任务队列</li><li>执行宏任务队列第一个</li></ol><p><code>2、3、4循环</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;这里是promise的构造函数&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resolve success&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setTimeout 这里定义一个异步任务&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">promise.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;res&#39;</span><span style="color:#E1E4E8;">, res)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;创建了一个promise&#39;</span><span style="color:#E1E4E8;">, promise) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6A737D;">// 从打开结果看出，promise的构造函数是同步的：按顺序执行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;这里是promise的构造函数&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resolve success&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;setTimeout 这里定义一个异步任务&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;res&#39;</span><span style="color:#24292E;">, res)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;创建了一个promise&#39;</span><span style="color:#24292E;">, promise) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6A737D;">// 从打开结果看出，promise的构造函数是同步的：按顺序执行</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#打印结果</span></span>
<span class="line"><span style="color:#B392F0;">这里是promise的构造函数</span></span>
<span class="line"><span style="color:#B392F0;">创建了一个promise</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Promise</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;resolve success&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#B392F0;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">success</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">这里定义一个异步任务</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#打印结果</span></span>
<span class="line"><span style="color:#6F42C1;">这里是promise的构造函数</span></span>
<span class="line"><span style="color:#6F42C1;">创建了一个promise</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Promise</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;resolve success&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#6F42C1;">res</span><span style="color:#24292E;"> </span><span style="color:#032F62;">resolve</span><span style="color:#24292E;"> </span><span style="color:#032F62;">success</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">这里定义一个异步任务</span></span></code></pre></div>`,10),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{m as __pageData,h as default};
